@page "/"
@using System.Text.Json;
@using Microsoft.Extensions.Configuration
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
<AuthorizeView>
    <Authorized>
        <h2>Claims</h2>
        <dl>
            @foreach (var Claim in @context.User.Claims)
            {
                <dt>@Claim.Type</dt>
                <dd>@Claim.Value</dd>
            }
        </dl>
        <h2>SessionStorage</h2>
        <h5>@SessionStorageKey</h5>
<pre>@SessionStorage</pre>
    </Authorized>
</AuthorizeView>
@code{
    string SessionStorage;
    string SessionStorageKey;
    protected override async Task OnInitializedAsync()
    {
        // Obtener el nombre de la llave correspondiente al valor
        // almacenado en sessionStorage.
        SessionStorageKey = "oidc.user:" +
        Configuration["oidc:Authority"] + ":" +
        Configuration["oidc:ClientId"];
        // Obtener el valor almacenado como string a través de
        // interoperabilidad con JavaScript.
        var SessionStorageAsString =
        await JSRuntime.InvokeAsync<string>("sessionStorage.getItem",
        SessionStorageKey);
        if (SessionStorageAsString != null)
        {
            // Si hay un valor, serializarlo para mostrarlo formateado.
            var JsonElement =
            JsonSerializer.Deserialize<JsonElement>(
            SessionStorageAsString);
            SessionStorage = JsonSerializer.Serialize(
            JsonElement, new JsonSerializerOptions
            {
                WriteIndented = true
            });
        }
    }
}